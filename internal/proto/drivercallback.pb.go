// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: drivercallback.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppBaseAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AppBaseAddress) Reset() {
	*x = AppBaseAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivercallback_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppBaseAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppBaseAddress) ProtoMessage() {}

func (x *AppBaseAddress) ProtoReflect() protoreflect.Message {
	mi := &file_drivercallback_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppBaseAddress.ProtoReflect.Descriptor instead.
func (*AppBaseAddress) Descriptor() ([]byte, []int) {
	return file_drivercallback_proto_rawDescGZIP(), []int{0}
}

func (x *AppBaseAddress) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *AppBaseAddress) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GatewayState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnStatus bool `protobuf:"varint,1,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
}

func (x *GatewayState) Reset() {
	*x = GatewayState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivercallback_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayState) ProtoMessage() {}

func (x *GatewayState) ProtoReflect() protoreflect.Message {
	mi := &file_drivercallback_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayState.ProtoReflect.Descriptor instead.
func (*GatewayState) Descriptor() ([]byte, []int) {
	return file_drivercallback_proto_rawDescGZIP(), []int{1}
}

func (x *GatewayState) GetConnStatus() bool {
	if x != nil {
		return x.ConnStatus
	}
	return false
}

type CmdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子设备ID
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// 指令协议
	Protocol EnumTUYAMQTTProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=common.EnumTUYAMQTTProtocol" json:"protocol,omitempty"`
	T        int64                `protobuf:"varint,3,opt,name=t,proto3" json:"t,omitempty"`
	S        int64                `protobuf:"varint,4,opt,name=s,proto3" json:"s,omitempty"`
	// 指令内容，透传
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CmdRequest) Reset() {
	*x = CmdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_drivercallback_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdRequest) ProtoMessage() {}

func (x *CmdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_drivercallback_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdRequest.ProtoReflect.Descriptor instead.
func (*CmdRequest) Descriptor() ([]byte, []int) {
	return file_drivercallback_proto_rawDescGZIP(), []int{2}
}

func (x *CmdRequest) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *CmdRequest) GetProtocol() EnumTUYAMQTTProtocol {
	if x != nil {
		return x.Protocol
	}
	return EnumTUYAMQTTProtocol_ENUM_TUYAMQTT_PROTOCOL_UNSPECIFIED
}

func (x *CmdRequest) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *CmdRequest) GetS() int64 {
	if x != nil {
		return x.S
	}
	return 0
}

func (x *CmdRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_drivercallback_proto protoreflect.FileDescriptor

var file_drivercallback_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x63, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38,
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x42, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0a, 0x43, 0x6d,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x55, 0x59, 0x41, 0x4d, 0x51,
	0x54, 0x54, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x01, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0xdc, 0x03, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x11,
	0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x15, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x70, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x32, 0xa1, 0x01, 0x0a, 0x14, 0x44, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x1a, 0x2e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x2e, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_drivercallback_proto_rawDescOnce sync.Once
	file_drivercallback_proto_rawDescData = file_drivercallback_proto_rawDesc
)

func file_drivercallback_proto_rawDescGZIP() []byte {
	file_drivercallback_proto_rawDescOnce.Do(func() {
		file_drivercallback_proto_rawDescData = protoimpl.X.CompressGZIP(file_drivercallback_proto_rawDescData)
	})
	return file_drivercallback_proto_rawDescData
}

var file_drivercallback_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_drivercallback_proto_goTypes = []interface{}{
	(*AppBaseAddress)(nil),          // 0: drivercallback.AppBaseAddress
	(*GatewayState)(nil),            // 1: drivercallback.GatewayState
	(*CmdRequest)(nil),              // 2: drivercallback.CmdRequest
	(EnumTUYAMQTTProtocol)(0),       // 3: common.EnumTUYAMQTTProtocol
	(*DeviceAddInfo)(nil),           // 4: device.DeviceAddInfo
	(*DeviceUpdateInfo)(nil),        // 5: device.DeviceUpdateInfo
	(*DeleteDeviceByIdRequest)(nil), // 6: device.DeleteDeviceByIdRequest
	(*LogLevelRequest)(nil),         // 7: common.LogLevelRequest
	(*Product)(nil),                 // 8: product.Product
	(*emptypb.Empty)(nil),           // 9: google.protobuf.Empty
}
var file_drivercallback_proto_depIdxs = []int32{
	3, // 0: drivercallback.CmdRequest.protocol:type_name -> common.EnumTUYAMQTTProtocol
	4, // 1: drivercallback.DriverCommonService.AddDeviceCallback:input_type -> device.DeviceAddInfo
	5, // 2: drivercallback.DriverCommonService.UpdateDeviceCallback:input_type -> device.DeviceUpdateInfo
	6, // 3: drivercallback.DriverCommonService.DeleteDeviceCallback:input_type -> device.DeleteDeviceByIdRequest
	7, // 4: drivercallback.DriverCommonService.ChangeLogLevel:input_type -> common.LogLevelRequest
	0, // 5: drivercallback.DriverCommonService.AppServiceAddress:input_type -> drivercallback.AppBaseAddress
	1, // 6: drivercallback.DriverCommonService.GatewayStateCallback:input_type -> drivercallback.GatewayState
	8, // 7: drivercallback.DPModelDriverService.UpdateProductCallback:input_type -> product.Product
	2, // 8: drivercallback.DPModelDriverService.IssueCommand:input_type -> drivercallback.CmdRequest
	9, // 9: drivercallback.DriverCommonService.AddDeviceCallback:output_type -> google.protobuf.Empty
	9, // 10: drivercallback.DriverCommonService.UpdateDeviceCallback:output_type -> google.protobuf.Empty
	9, // 11: drivercallback.DriverCommonService.DeleteDeviceCallback:output_type -> google.protobuf.Empty
	9, // 12: drivercallback.DriverCommonService.ChangeLogLevel:output_type -> google.protobuf.Empty
	9, // 13: drivercallback.DriverCommonService.AppServiceAddress:output_type -> google.protobuf.Empty
	9, // 14: drivercallback.DriverCommonService.GatewayStateCallback:output_type -> google.protobuf.Empty
	9, // 15: drivercallback.DPModelDriverService.UpdateProductCallback:output_type -> google.protobuf.Empty
	9, // 16: drivercallback.DPModelDriverService.IssueCommand:output_type -> google.protobuf.Empty
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_drivercallback_proto_init() }
func file_drivercallback_proto_init() {
	if File_drivercallback_proto != nil {
		return
	}
	file_common_proto_init()
	file_device_proto_init()
	file_product_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_drivercallback_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppBaseAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivercallback_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_drivercallback_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_drivercallback_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_drivercallback_proto_goTypes,
		DependencyIndexes: file_drivercallback_proto_depIdxs,
		MessageInfos:      file_drivercallback_proto_msgTypes,
	}.Build()
	File_drivercallback_proto = out.File
	file_drivercallback_proto_rawDesc = nil
	file_drivercallback_proto_goTypes = nil
	file_drivercallback_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriverCommonServiceClient is the client API for DriverCommonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverCommonServiceClient interface {
	AddDeviceCallback(ctx context.Context, in *DeviceAddInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDeviceCallback(ctx context.Context, in *DeviceUpdateInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDeviceCallback(ctx context.Context, in *DeleteDeviceByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AppServiceAddress(ctx context.Context, in *AppBaseAddress, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GatewayStateCallback(ctx context.Context, in *GatewayState, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type driverCommonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverCommonServiceClient(cc grpc.ClientConnInterface) DriverCommonServiceClient {
	return &driverCommonServiceClient{cc}
}

func (c *driverCommonServiceClient) AddDeviceCallback(ctx context.Context, in *DeviceAddInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/AddDeviceCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommonServiceClient) UpdateDeviceCallback(ctx context.Context, in *DeviceUpdateInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/UpdateDeviceCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommonServiceClient) DeleteDeviceCallback(ctx context.Context, in *DeleteDeviceByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/DeleteDeviceCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommonServiceClient) ChangeLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/ChangeLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommonServiceClient) AppServiceAddress(ctx context.Context, in *AppBaseAddress, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/AppServiceAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverCommonServiceClient) GatewayStateCallback(ctx context.Context, in *GatewayState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DriverCommonService/GatewayStateCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverCommonServiceServer is the server API for DriverCommonService service.
type DriverCommonServiceServer interface {
	AddDeviceCallback(context.Context, *DeviceAddInfo) (*emptypb.Empty, error)
	UpdateDeviceCallback(context.Context, *DeviceUpdateInfo) (*emptypb.Empty, error)
	DeleteDeviceCallback(context.Context, *DeleteDeviceByIdRequest) (*emptypb.Empty, error)
	ChangeLogLevel(context.Context, *LogLevelRequest) (*emptypb.Empty, error)
	AppServiceAddress(context.Context, *AppBaseAddress) (*emptypb.Empty, error)
	GatewayStateCallback(context.Context, *GatewayState) (*emptypb.Empty, error)
}

// UnimplementedDriverCommonServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDriverCommonServiceServer struct {
}

func (*UnimplementedDriverCommonServiceServer) AddDeviceCallback(context.Context, *DeviceAddInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceCallback not implemented")
}
func (*UnimplementedDriverCommonServiceServer) UpdateDeviceCallback(context.Context, *DeviceUpdateInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceCallback not implemented")
}
func (*UnimplementedDriverCommonServiceServer) DeleteDeviceCallback(context.Context, *DeleteDeviceByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceCallback not implemented")
}
func (*UnimplementedDriverCommonServiceServer) ChangeLogLevel(context.Context, *LogLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLogLevel not implemented")
}
func (*UnimplementedDriverCommonServiceServer) AppServiceAddress(context.Context, *AppBaseAddress) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppServiceAddress not implemented")
}
func (*UnimplementedDriverCommonServiceServer) GatewayStateCallback(context.Context, *GatewayState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayStateCallback not implemented")
}

func RegisterDriverCommonServiceServer(s *grpc.Server, srv DriverCommonServiceServer) {
	s.RegisterService(&_DriverCommonService_serviceDesc, srv)
}

func _DriverCommonService_AddDeviceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceAddInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).AddDeviceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/AddDeviceCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).AddDeviceCallback(ctx, req.(*DeviceAddInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommonService_UpdateDeviceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceUpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).UpdateDeviceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/UpdateDeviceCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).UpdateDeviceCallback(ctx, req.(*DeviceUpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommonService_DeleteDeviceCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).DeleteDeviceCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/DeleteDeviceCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).DeleteDeviceCallback(ctx, req.(*DeleteDeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommonService_ChangeLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).ChangeLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/ChangeLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).ChangeLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommonService_AppServiceAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppBaseAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).AppServiceAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/AppServiceAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).AppServiceAddress(ctx, req.(*AppBaseAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverCommonService_GatewayStateCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverCommonServiceServer).GatewayStateCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DriverCommonService/GatewayStateCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverCommonServiceServer).GatewayStateCallback(ctx, req.(*GatewayState))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriverCommonService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drivercallback.DriverCommonService",
	HandlerType: (*DriverCommonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeviceCallback",
			Handler:    _DriverCommonService_AddDeviceCallback_Handler,
		},
		{
			MethodName: "UpdateDeviceCallback",
			Handler:    _DriverCommonService_UpdateDeviceCallback_Handler,
		},
		{
			MethodName: "DeleteDeviceCallback",
			Handler:    _DriverCommonService_DeleteDeviceCallback_Handler,
		},
		{
			MethodName: "ChangeLogLevel",
			Handler:    _DriverCommonService_ChangeLogLevel_Handler,
		},
		{
			MethodName: "AppServiceAddress",
			Handler:    _DriverCommonService_AppServiceAddress_Handler,
		},
		{
			MethodName: "GatewayStateCallback",
			Handler:    _DriverCommonService_GatewayStateCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drivercallback.proto",
}

// DPModelDriverServiceClient is the client API for DPModelDriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DPModelDriverServiceClient interface {
	UpdateProductCallback(ctx context.Context, in *Product, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 指令下发
	IssueCommand(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dPModelDriverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDPModelDriverServiceClient(cc grpc.ClientConnInterface) DPModelDriverServiceClient {
	return &dPModelDriverServiceClient{cc}
}

func (c *dPModelDriverServiceClient) UpdateProductCallback(ctx context.Context, in *Product, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DPModelDriverService/UpdateProductCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dPModelDriverServiceClient) IssueCommand(ctx context.Context, in *CmdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drivercallback.DPModelDriverService/IssueCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DPModelDriverServiceServer is the server API for DPModelDriverService service.
type DPModelDriverServiceServer interface {
	UpdateProductCallback(context.Context, *Product) (*emptypb.Empty, error)
	// 指令下发
	IssueCommand(context.Context, *CmdRequest) (*emptypb.Empty, error)
}

// UnimplementedDPModelDriverServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDPModelDriverServiceServer struct {
}

func (*UnimplementedDPModelDriverServiceServer) UpdateProductCallback(context.Context, *Product) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductCallback not implemented")
}
func (*UnimplementedDPModelDriverServiceServer) IssueCommand(context.Context, *CmdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCommand not implemented")
}

func RegisterDPModelDriverServiceServer(s *grpc.Server, srv DPModelDriverServiceServer) {
	s.RegisterService(&_DPModelDriverService_serviceDesc, srv)
}

func _DPModelDriverService_UpdateProductCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPModelDriverServiceServer).UpdateProductCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DPModelDriverService/UpdateProductCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPModelDriverServiceServer).UpdateProductCallback(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _DPModelDriverService_IssueCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DPModelDriverServiceServer).IssueCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drivercallback.DPModelDriverService/IssueCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DPModelDriverServiceServer).IssueCommand(ctx, req.(*CmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DPModelDriverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drivercallback.DPModelDriverService",
	HandlerType: (*DPModelDriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProductCallback",
			Handler:    _DPModelDriverService_UpdateProductCallback_Handler,
		},
		{
			MethodName: "IssueCommand",
			Handler:    _DPModelDriverService_IssueCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drivercallback.proto",
}
