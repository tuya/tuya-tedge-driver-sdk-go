// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: deviceservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceServiceByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeviceServiceByIdRequest) Reset() {
	*x = DeviceServiceByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceServiceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceServiceByIdRequest) ProtoMessage() {}

func (x *DeviceServiceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceServiceByIdRequest.ProtoReflect.Descriptor instead.
func (*DeviceServiceByIdRequest) Descriptor() ([]byte, []int) {
	return file_deviceservice_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceServiceByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeviceService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	BaseAddress        string `protobuf:"bytes,3,opt,name=base_address,json=baseAddress,proto3" json:"base_address,omitempty"`
	DeviceLibraryId    string `protobuf:"bytes,4,opt,name=device_library_id,json=deviceLibraryId,proto3" json:"device_library_id,omitempty"`
	DockerContainerId  string `protobuf:"bytes,5,opt,name=docker_container_id,json=dockerContainerId,proto3" json:"docker_container_id,omitempty"`
	Config             []byte `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`
	IsMountDir         bool   `protobuf:"varint,7,opt,name=is_mount_dir,json=isMountDir,proto3" json:"is_mount_dir,omitempty"`
	RunStatus          int32  `protobuf:"varint,8,opt,name=run_status,json=runStatus,proto3" json:"run_status,omitempty"`
	ExpertMode         bool   `protobuf:"varint,9,opt,name=expert_mode,json=expertMode,proto3" json:"expert_mode,omitempty"`
	ExpertModeContent  string `protobuf:"bytes,10,opt,name=expert_mode_content,json=expertModeContent,proto3" json:"expert_mode_content,omitempty"`
	DockerParamsSwitch bool   `protobuf:"varint,11,opt,name=docker_params_switch,json=dockerParamsSwitch,proto3" json:"docker_params_switch,omitempty"`
	DockerParams       string `protobuf:"bytes,12,opt,name=docker_params,json=dockerParams,proto3" json:"docker_params,omitempty"`
	IsAppService       bool   `protobuf:"varint,13,opt,name=is_app_service,json=isAppService,proto3" json:"is_app_service,omitempty"`
}

func (x *DeviceService) Reset() {
	*x = DeviceService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceService) ProtoMessage() {}

func (x *DeviceService) ProtoReflect() protoreflect.Message {
	mi := &file_deviceservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceService.ProtoReflect.Descriptor instead.
func (*DeviceService) Descriptor() ([]byte, []int) {
	return file_deviceservice_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceService) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeviceService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceService) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *DeviceService) GetDeviceLibraryId() string {
	if x != nil {
		return x.DeviceLibraryId
	}
	return ""
}

func (x *DeviceService) GetDockerContainerId() string {
	if x != nil {
		return x.DockerContainerId
	}
	return ""
}

func (x *DeviceService) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DeviceService) GetIsMountDir() bool {
	if x != nil {
		return x.IsMountDir
	}
	return false
}

func (x *DeviceService) GetRunStatus() int32 {
	if x != nil {
		return x.RunStatus
	}
	return 0
}

func (x *DeviceService) GetExpertMode() bool {
	if x != nil {
		return x.ExpertMode
	}
	return false
}

func (x *DeviceService) GetExpertModeContent() string {
	if x != nil {
		return x.ExpertModeContent
	}
	return ""
}

func (x *DeviceService) GetDockerParamsSwitch() bool {
	if x != nil {
		return x.DockerParamsSwitch
	}
	return false
}

func (x *DeviceService) GetDockerParams() string {
	if x != nil {
		return x.DockerParams
	}
	return ""
}

func (x *DeviceService) GetIsAppService() bool {
	if x != nil {
		return x.IsAppService
	}
	return false
}

type MultiDeviceServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total          uint32           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	DeviceServices []*DeviceService `protobuf:"bytes,2,rep,name=device_services,json=deviceServices,proto3" json:"device_services,omitempty"`
}

func (x *MultiDeviceServiceResponse) Reset() {
	*x = MultiDeviceServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDeviceServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDeviceServiceResponse) ProtoMessage() {}

func (x *MultiDeviceServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deviceservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDeviceServiceResponse.ProtoReflect.Descriptor instead.
func (*MultiDeviceServiceResponse) Descriptor() ([]byte, []int) {
	return file_deviceservice_proto_rawDescGZIP(), []int{2}
}

func (x *MultiDeviceServiceResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *MultiDeviceServiceResponse) GetDeviceServices() []*DeviceService {
	if x != nil {
		return x.DeviceServices
	}
	return nil
}

type AppByRegisterNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AppByRegisterNameReq) Reset() {
	*x = AppByRegisterNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppByRegisterNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppByRegisterNameReq) ProtoMessage() {}

func (x *AppByRegisterNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_deviceservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppByRegisterNameReq.ProtoReflect.Descriptor instead.
func (*AppByRegisterNameReq) Descriptor() ([]byte, []int) {
	return file_deviceservice_proto_rawDescGZIP(), []int{3}
}

func (x *AppByRegisterNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DriverProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Port string `protobuf:"bytes,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DriverProxyRequest) Reset() {
	*x = DriverProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deviceservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriverProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverProxyRequest) ProtoMessage() {}

func (x *DriverProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deviceservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverProxyRequest.ProtoReflect.Descriptor instead.
func (*DriverProxyRequest) Descriptor() ([]byte, []int) {
	return file_deviceservice_proto_rawDescGZIP(), []int{4}
}

func (x *DriverProxyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DriverProxyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DriverProxyRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DriverProxyRequest) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

var File_deviceservice_proto protoreflect.FileDescriptor

var file_deviceservice_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd9, 0x03,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x79, 0x0a, 0x1a, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x45, 0x0a,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x42, 0x79, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x60, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x32, 0x9f, 0x02, 0x0a, 0x10, 0x52, 0x70, 0x63, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x27, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x42,
	0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_deviceservice_proto_rawDescOnce sync.Once
	file_deviceservice_proto_rawDescData = file_deviceservice_proto_rawDesc
)

func file_deviceservice_proto_rawDescGZIP() []byte {
	file_deviceservice_proto_rawDescOnce.Do(func() {
		file_deviceservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_deviceservice_proto_rawDescData)
	})
	return file_deviceservice_proto_rawDescData
}

var file_deviceservice_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_deviceservice_proto_goTypes = []interface{}{
	(*DeviceServiceByIdRequest)(nil),   // 0: deviceservice.DeviceServiceByIdRequest
	(*DeviceService)(nil),              // 1: deviceservice.DeviceService
	(*MultiDeviceServiceResponse)(nil), // 2: deviceservice.MultiDeviceServiceResponse
	(*AppByRegisterNameReq)(nil),       // 3: deviceservice.AppByRegisterNameReq
	(*DriverProxyRequest)(nil),         // 4: deviceservice.DriverProxyRequest
	(*emptypb.Empty)(nil),              // 5: google.protobuf.Empty
}
var file_deviceservice_proto_depIdxs = []int32{
	1, // 0: deviceservice.MultiDeviceServiceResponse.device_services:type_name -> deviceservice.DeviceService
	0, // 1: deviceservice.RpcDeviceService.DeviceServiceById:input_type -> deviceservice.DeviceServiceByIdRequest
	3, // 2: deviceservice.RpcDeviceService.GetAppRegisterName:input_type -> deviceservice.AppByRegisterNameReq
	4, // 3: deviceservice.RpcDeviceService.DriverProxyRegister:input_type -> deviceservice.DriverProxyRequest
	1, // 4: deviceservice.RpcDeviceService.DeviceServiceById:output_type -> deviceservice.DeviceService
	1, // 5: deviceservice.RpcDeviceService.GetAppRegisterName:output_type -> deviceservice.DeviceService
	5, // 6: deviceservice.RpcDeviceService.DriverProxyRegister:output_type -> google.protobuf.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_deviceservice_proto_init() }
func file_deviceservice_proto_init() {
	if File_deviceservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deviceservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceServiceByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiDeviceServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppByRegisterNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deviceservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriverProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deviceservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deviceservice_proto_goTypes,
		DependencyIndexes: file_deviceservice_proto_depIdxs,
		MessageInfos:      file_deviceservice_proto_msgTypes,
	}.Build()
	File_deviceservice_proto = out.File
	file_deviceservice_proto_rawDesc = nil
	file_deviceservice_proto_goTypes = nil
	file_deviceservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcDeviceServiceClient is the client API for RpcDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcDeviceServiceClient interface {
	DeviceServiceById(ctx context.Context, in *DeviceServiceByIdRequest, opts ...grpc.CallOption) (*DeviceService, error)
	GetAppRegisterName(ctx context.Context, in *AppByRegisterNameReq, opts ...grpc.CallOption) (*DeviceService, error)
	//驱动注册代理路由信息
	DriverProxyRegister(ctx context.Context, in *DriverProxyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rpcDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDeviceServiceClient(cc grpc.ClientConnInterface) RpcDeviceServiceClient {
	return &rpcDeviceServiceClient{cc}
}

func (c *rpcDeviceServiceClient) DeviceServiceById(ctx context.Context, in *DeviceServiceByIdRequest, opts ...grpc.CallOption) (*DeviceService, error) {
	out := new(DeviceService)
	err := c.cc.Invoke(ctx, "/deviceservice.RpcDeviceService/DeviceServiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceServiceClient) GetAppRegisterName(ctx context.Context, in *AppByRegisterNameReq, opts ...grpc.CallOption) (*DeviceService, error) {
	out := new(DeviceService)
	err := c.cc.Invoke(ctx, "/deviceservice.RpcDeviceService/GetAppRegisterName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceServiceClient) DriverProxyRegister(ctx context.Context, in *DriverProxyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/deviceservice.RpcDeviceService/DriverProxyRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcDeviceServiceServer is the server API for RpcDeviceService service.
type RpcDeviceServiceServer interface {
	DeviceServiceById(context.Context, *DeviceServiceByIdRequest) (*DeviceService, error)
	GetAppRegisterName(context.Context, *AppByRegisterNameReq) (*DeviceService, error)
	//驱动注册代理路由信息
	DriverProxyRegister(context.Context, *DriverProxyRequest) (*emptypb.Empty, error)
}

// UnimplementedRpcDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRpcDeviceServiceServer struct {
}

func (*UnimplementedRpcDeviceServiceServer) DeviceServiceById(context.Context, *DeviceServiceByIdRequest) (*DeviceService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceServiceById not implemented")
}
func (*UnimplementedRpcDeviceServiceServer) GetAppRegisterName(context.Context, *AppByRegisterNameReq) (*DeviceService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRegisterName not implemented")
}
func (*UnimplementedRpcDeviceServiceServer) DriverProxyRegister(context.Context, *DriverProxyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverProxyRegister not implemented")
}

func RegisterRpcDeviceServiceServer(s *grpc.Server, srv RpcDeviceServiceServer) {
	s.RegisterService(&_RpcDeviceService_serviceDesc, srv)
}

func _RpcDeviceService_DeviceServiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceServiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServiceServer).DeviceServiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.RpcDeviceService/DeviceServiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServiceServer).DeviceServiceById(ctx, req.(*DeviceServiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDeviceService_GetAppRegisterName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppByRegisterNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServiceServer).GetAppRegisterName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.RpcDeviceService/GetAppRegisterName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServiceServer).GetAppRegisterName(ctx, req.(*AppByRegisterNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDeviceService_DriverProxyRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServiceServer).DriverProxyRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deviceservice.RpcDeviceService/DriverProxyRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServiceServer).DriverProxyRegister(ctx, req.(*DriverProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcDeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deviceservice.RpcDeviceService",
	HandlerType: (*RpcDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceServiceById",
			Handler:    _RpcDeviceService_DeviceServiceById_Handler,
		},
		{
			MethodName: "GetAppRegisterName",
			Handler:    _RpcDeviceService_GetAppRegisterName_Handler,
		},
		{
			MethodName: "DriverProxyRegister",
			Handler:    _RpcDeviceService_DriverProxyRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deviceservice.proto",
}
